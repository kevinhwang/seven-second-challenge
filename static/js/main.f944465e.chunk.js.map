{"version":3,"sources":["serviceWorker.ts","state.ts","App/HeaderBar/NavDrawer/index.tsx","App/HeaderBar/index.tsx","App/Game/Slide/Timer/index.tsx","App/Game/Slide/index.tsx","App/Game/index.tsx","App/Game/colors/color-utils.ts","App/Edit/index.tsx","App/Home/index.tsx","App/Settings/index.tsx","App/index.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","localStoragePersistence","Persistence","useStyles","makeStyles","theme","createStyles","drawer","width","drawerHeader","mixins","toolbar","NavDrawer","title","open","onOpen","onClose","classes","SwipeableDrawer","className","role","List","ListItem","ListItemIcon","ListItemText","primary","Divider","component","onClick","button","Link","to","href","display","breakpoints","up","HeaderBar","children","useState","drawerOpen","setDrawerOpen","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","noWrap","Timer","msMax","onMsLeftChange","msLeft","setMsLeft","useEffect","timer","setInterval","newMsLeft","Math","max","clearInterval","Box","CircularProgress","size","value","top","left","bottom","right","alignItems","justifyContent","content","padding","spacing","textAlign","palette","text","secondary","fontSize","Slide","timerMs","Grid","container","justify","style","minHeight","item","xs","random","toString","SlideMode","luminance","rgb","map","v","pow","invertIfLowContrast","textColor","bgColor","textColorRgbValues","parseColor","values","rgb0","rgb1","lum0","lum1","min","contrast","r","g","b","orderPlayers","teamMembersListRoot","backgroundColor","background","paper","teams","start","limit","numTeams","length","positions","Array","fill","floor","range","forEach","i","undefined","team","pos","members","name","teamColor","Game","appState","challenges","gameData","settings","challengeDurationMs","index","setIndex","PRE","slideMode","setSlideMode","handleKeyPress","useCallback","event","key","STARTED","document","addEventListener","removeEventListener","totalPlayers","reduce","sum","t","currentPlayer","rest","challenge","rules","showName","useTheme","styles","TextField","select","label","onChange","target","_","MenuItem","subheader","ListSubheader","htmlColor","slice","align","Edit","appStateRef","teamsState","gameDataState","direction","alignContent","teamState","get","set","currentTarget","multiline","fullWidth","join","newMembers","split","hex","Button","filter","j","flatMap","newTeams","chunk","ceil","teamMembers","shuffle","Home","memberName","Settings","settingsState","challengeDurationSec","parseFloat","FormControlLabel","control","Checkbox","checked","snowing","createMuiTheme","type","defaultChallenges","App","attach","ThemeProvider","CssBaseline","basename","process","exact","path","ReactDOM","render","StrictMode","getElementById","URL","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f944465e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import {Persistence} from '@hookstate/persistence'\nimport {ReactNode} from 'react'\n\nexport interface Team {\n  readonly name: string\n  readonly members: string[]\n  readonly color: string\n}\n\nexport interface GameSettings {\n  readonly challengeDurationMs: number\n  readonly teams: Team[]\n  readonly snowing: boolean\n}\n\nexport interface ChallengeRules {\n  readonly showName: boolean\n}\n\nexport interface Challenge {\n  readonly challenge: ReactNode\n  readonly rules?: ChallengeRules\n}\n\nexport interface GameData {\n  readonly challenges: Challenge[]\n}\n\nexport interface AppState {\n  readonly settings: GameSettings\n  readonly gameData: GameData\n}\n\nexport const localStoragePersistence = Persistence('a8dee0a0-d412-45f5-b431-eb1ae6bd9ebc')\n\n\n","import React, {ReactNode} from 'react'\nimport {Divider, List, ListItem, ListItemIcon, ListItemText, SwipeableDrawer} from '@material-ui/core'\nimport EditIcon from '@material-ui/icons/Edit'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport HomeIcon from '@material-ui/icons/Home'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport TimerIcon from '@material-ui/icons/Timer'\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\nimport {Link} from 'react-router-dom'\n\nexport interface NavDrawerProps {\n  readonly title?: ReactNode\n  readonly open: boolean\n  readonly onOpen: React.ReactEventHandler\n  readonly onClose: React.ReactEventHandler\n}\n\nconst useStyles = makeStyles(\n  (theme: Theme) => createStyles({\n    drawer: {\n      width: 250\n    },\n    drawerHeader: theme.mixins.toolbar\n  })\n)\n\nexport default function NavDrawer({title = '', open, onOpen, onClose}: NavDrawerProps) {\n  const classes = useStyles()\n  return <SwipeableDrawer open={open} onOpen={onOpen} onClose={onClose}>\n    <div className={classes.drawer} role='presentation'>\n      <div className={classes.drawerHeader}>\n        <List>\n          <ListItem>\n            <ListItemIcon>\n              <TimerIcon />\n            </ListItemIcon>\n            <ListItemText primary={title} />\n          </ListItem>\n        </List>\n      </div>\n      <Divider />\n      <List component='nav' onClick={onClose}>\n        <ListItem button component={Link} to='/'>\n          <ListItemIcon>\n            <HomeIcon />\n          </ListItemIcon>\n          <ListItemText primary='Home' />\n        </ListItem>\n        <ListItem button component={Link} to='/edit'>\n          <ListItemIcon>\n            <EditIcon />\n          </ListItemIcon>\n          <ListItemText primary='Edit' />\n        </ListItem>\n        <ListItem button component={Link} to='/play'>\n          <ListItemIcon>\n            <PlayIcon />\n          </ListItemIcon>\n          <ListItemText primary='Play' />\n        </ListItem>\n        <ListItem button component={Link} to='/settings'>\n          <ListItemIcon>\n            <SettingsIcon />\n          </ListItemIcon>\n          <ListItemText primary='Settings' />\n        </ListItem>\n      </List>\n      <Divider />\n      <List component='nav' onClick={onClose}>\n        <ListItem button component='a' href='https://github.com/kevinhwang/seven-second-challenge'>\n          <ListItemIcon>\n            <GitHubIcon />\n          </ListItemIcon>\n          <ListItemText primary='GitHub' />\n        </ListItem>\n      </List>\n    </div>\n  </SwipeableDrawer>\n}\n","import React, {ReactNode, useState} from 'react'\nimport {AppBar, createStyles, IconButton, makeStyles, Theme, Toolbar, Typography} from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport NavDrawer from './NavDrawer'\n\nexport interface HeaderBarProps {\n  readonly title?: ReactNode\n  readonly children?: ReactNode\n}\n\nconst useStyles = makeStyles(\n  (theme: Theme) => createStyles({\n    drawer: {\n      width: 250\n    },\n    drawerHeader: theme.mixins.toolbar,\n    title: {\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block'\n      }\n    }\n  })\n)\n\nexport default function HeaderBar({title, children}: HeaderBarProps) {\n  const [drawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const classes = useStyles()\n\n  return <AppBar position='sticky'>\n    <NavDrawer title={title} open={drawerOpen} onOpen={() => setDrawerOpen(true)} onClose={() => setDrawerOpen(false)} />\n    <Toolbar>\n      <IconButton\n        onClick={() => setDrawerOpen(true)}\n        edge='start'\n        color='inherit'\n        aria-label='open drawer'>\n        <MenuIcon />\n      </IconButton>\n      <Typography variant='h6' className={classes.title} noWrap>\n        {title}\n      </Typography>\n      {children}\n    </Toolbar>\n  </AppBar>\n}\n","import {Box, CircularProgress, Typography} from '@material-ui/core'\nimport React, {useEffect, useState} from 'react'\n\nexport interface TimerProps {\n  readonly msMax: number\n  readonly onMsLeftChange?: {(secondsLeft: number): void}\n}\n\nexport default function Timer({msMax, onMsLeftChange}: TimerProps) {\n  const [msLeft, setMsLeft] = useState(msMax)\n\n  useEffect(() => {\n    if (msLeft <= 0) {\n      return\n    }\n    const timer = setInterval(() => {\n      const newMsLeft: number = Math.max(msLeft - 100, 0)\n      setMsLeft(newMsLeft)\n      onMsLeftChange && onMsLeftChange(newMsLeft)\n\n      if (newMsLeft <= 0) {\n        clearInterval(timer)\n      }\n    }, 100)\n    return () => {\n      clearInterval(timer)\n    }\n  }, [msLeft, onMsLeftChange])\n\n  return <Box position='relative' display='inline-flex'>\n    <CircularProgress size='15rem' variant='static' value={msLeft / msMax * 100} />\n    <Box\n      top={0}\n      left={0}\n      bottom={0}\n      right={0}\n      position='absolute'\n      display='grid'\n      alignItems='center'\n      justifyContent='center'>\n      <Typography variant='h1' component='div' color='textSecondary'>\n        {msLeft / 1000}\n      </Typography>\n    </Box>\n  </Box>\n}\n","import React, {ReactNode} from 'react'\nimport {Grid} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Timer from './Timer'\n\nexport interface SlideProps {\n  readonly timerMs?: number\n  readonly children?: ReactNode\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    padding: theme.spacing(4),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    fontSize: '8rem'\n  }\n}))\n\nexport default function Slide({timerMs = 10000, children}: SlideProps) {\n  const classes = useStyles()\n\n  return <Grid container justify='center' alignItems='center' style={{minHeight: '75vh'}}>\n    <Grid item xs={9}>\n      <div className={classes.content}>\n        {children}\n      </div>\n    </Grid>\n    <Grid item xs={3}>\n      <div className={classes.content}>\n        <Timer msMax={timerMs} key={Math.random().toString(36)} />\n      </div>\n    </Grid>\n  </Grid>\n}\n","import React, {useCallback, useEffect, useState} from 'react'\nimport {AppState, Team} from '../../state'\nimport {\n  createStyles,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListSubheader,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Theme,\n  Typography,\n  useTheme\n} from '@material-ui/core'\nimport RadioButtonUncheckedOutlinedIcon from '@material-ui/icons/RadioButtonUncheckedOutlined'\nimport StarIcon from '@material-ui/icons/Star'\nimport Slide from './Slide'\nimport range from 'lodash/range'\nimport {invertIfLowContrast} from './colors/color-utils'\n\nexport interface GameProps {\n  readonly appState: AppState\n}\n\nconst useStyles = makeStyles(\n  (theme: Theme) => createStyles({\n    teamMembersListRoot: {\n      backgroundColor: theme.palette.background.paper\n    }\n  })\n)\n\ninterface PlayerInfo {\n  readonly name: string\n  readonly team: string\n  readonly teamColor: string\n}\n\nfunction* orderPlayers(teams: Team[], start: number = 0, limit?: number): Generator<PlayerInfo> {\n  const numTeams: number = teams.length\n  const positions: number[] = new Array(numTeams).fill(Math.floor(start / numTeams))\n  range(start % numTeams).forEach(i => ++positions[i])\n\n  let i = start\n\n  for (; limit === undefined || i - start < limit; ++i) {\n    const team: Team = teams[i % numTeams]\n    const pos: number = positions[i % numTeams]++ % team.members.length\n\n    yield {\n      name: team.members[pos],\n      team: team.name,\n      teamColor: team.color\n    }\n  }\n\n  return i - start\n}\n\nenum SlideMode {\n  PRE, STARTED\n}\n\nexport default function Game({appState: {gameData: {challenges}, settings: {teams, challengeDurationMs}}}: GameProps) {\n  const [index, setIndex] = useState<number>(0)\n  const [slideMode, setSlideMode] = useState<SlideMode>(SlideMode.PRE)\n\n  const handleKeyPress = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'ArrowLeft') {\n        setSlideMode(SlideMode.PRE)\n\n        if (index > 0) {\n          setIndex(index - 1)\n        }\n      } else if (event.key === 'ArrowRight') {\n        if (slideMode === SlideMode.PRE) {\n          setSlideMode(SlideMode.STARTED)\n        } else if (index < challenges.length - 1) {\n          setSlideMode(SlideMode.PRE)\n          setIndex(index + 1)\n        }\n      }\n    },\n    [index, setIndex, slideMode, setSlideMode, challenges.length])\n\n  useEffect(\n    () => {\n      document.addEventListener('keydown', handleKeyPress)\n\n      return () => document.removeEventListener('keydown', handleKeyPress)\n    },\n    [index, slideMode, handleKeyPress]\n  )\n\n  const totalPlayers: number = teams.reduce((sum, t) => sum + t.members.length, 0)\n\n  const [currentPlayer, ...rest] = orderPlayers(teams, index, Math.min(totalPlayers, challenges.length - index))\n  const teamColor = currentPlayer.teamColor\n\n  const {challenge, rules = {showName: true}} = challenges[index]\n\n\n  const theme = useTheme()\n\n  const styles = useStyles()\n\n  return <div>\n    <Grid container justify='center'>\n      <Grid item>\n        <TextField\n          select\n          label=\"#\"\n          onChange={event => setIndex(event.target.value as unknown as number)}\n          value={index}>\n          {\n            challenges.map(\n              (_, i) => (\n                <MenuItem key={`slide-choice-${i}`} value={i}>\n                  {i + 1}\n                </MenuItem>\n              )\n            )\n          }\n        </TextField>\n      </Grid>\n    </Grid>\n    <div>\n      {\n        slideMode === SlideMode.PRE ? <Grid container justify='center'>\n            <Grid item xs={8} className={styles.teamMembersListRoot}>\n              <List subheader={\n                <ListSubheader>\n                  Next Up\n                </ListSubheader>\n              }>\n                <ListItem button onClick={() => setSlideMode(SlideMode.STARTED)}>\n                  <ListItemIcon>\n                    <StarIcon htmlColor={currentPlayer.teamColor} />\n                  </ListItemIcon>\n                  <ListItemText primary={currentPlayer.name} />\n                </ListItem>\n              </List>\n              <Divider />\n              <List subheader={\n                <ListSubheader>\n                  Coming Up\n                </ListSubheader>\n              }>\n                {\n                  rest.slice(0, 3 * teams.length).map(({name, teamColor}: PlayerInfo, i) => <ListItem\n                      key={`nextup-${i}`} button\n                      onClick={() => setIndex(index + i + 1)}>\n                      <ListItemIcon>\n                        <RadioButtonUncheckedOutlinedIcon htmlColor={teamColor} />\n                      </ListItemIcon>\n                      <ListItemText primary={name} />\n                    </ListItem>\n                  )\n                }\n              </List>\n            </Grid>\n          </Grid>\n          : <div>\n            <Typography variant='h1' align='center' style={{\n              backgroundColor: teamColor,\n              color: invertIfLowContrast(theme.palette.text.primary, teamColor)\n            }}>\n              {rules.showName ? currentPlayer.name : '·'}\n            </Typography>\n            <Slide timerMs={challengeDurationMs}>\n              {challenge}\n            </Slide>\n          </div>\n      }\n    </div>\n  </div>\n}\n","import parseColor from 'color-parse'\n\nexport type RgbValues = [number, number, number]\n\nconst luminance = (rgb: RgbValues): number => {\n  const [r, g, b] = rgb\n    .map(v => v / 255)\n    .map(v => v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4))\n  return r * 0.2126 + g * 0.7152 + b * 0.0722\n}\n\nconst contrast = (rgb0: RgbValues, rgb1: RgbValues): number => {\n  const lum0 = luminance(rgb0)\n  const lum1 = luminance(rgb1)\n  const brightest = Math.max(lum0, lum1)\n  const darkest = Math.min(lum0, lum1)\n  return (brightest + 0.05) / (darkest + 0.05)\n}\n\nconst invert = (rgb: RgbValues): RgbValues => rgb.map(v => 255 - v) as RgbValues\n\nexport const invertIfLowContrast = (textColor: string, bgColor: string): string => {\n  const {values: textColorRgbValues} = parseColor(textColor)\n  const {values: bgColorRgbValues} = parseColor(bgColor)\n\n  const [r, g, b] = contrast(textColorRgbValues, bgColorRgbValues) < 5 ? invert(textColorRgbValues) : textColorRgbValues\n\n  return `rgb(${r}, ${g}, ${b})`\n}\n","import {chunk, shuffle} from 'lodash'\nimport React, {ChangeEvent} from 'react'\nimport {ChromePicker, ColorResult} from 'react-color'\n\nimport {Button, Grid, TextField, Typography} from '@material-ui/core'\nimport {State, useState} from '@hookstate/core'\nimport StopIcon from '@material-ui/icons/Stop'\nimport {AppState} from '../../state'\n\nexport interface EditProps {\n  readonly appStateRef: State<AppState>\n}\n\nexport default function Edit({appStateRef}: EditProps) {\n  const teamsState = useState(appStateRef.settings.teams)\n  const gameDataState = useState(appStateRef.gameData)\n\n  return <Grid container direction='column' alignContent='center' spacing={4}>\n    <Grid item>\n      <Typography variant='h2'>Teams</Typography>\n    </Grid>\n    <Grid item>\n      <Grid container spacing={4} justify='center'>\n        {\n          teamsState.map(\n            (teamState, i) => {\n              const {name, members, color} = teamState.get()\n\n              return <Grid item key={`team-${i}`}>\n                <Grid container direction='column' spacing={1}>\n                  <Grid item>\n                    <Grid container spacing={1} alignItems='flex-end'>\n                      <Grid item>\n                        <StopIcon style={{color}} />\n                      </Grid>\n                      <Grid item>\n                        <TextField\n                          label='Team Name'\n                          value={name}\n                          onChange={\n                            (event: ChangeEvent<HTMLTextAreaElement>) => teamState.set(team => ({\n                              ...team,\n                              name: event.currentTarget.value\n                            }))\n                          } />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <TextField\n                      label='Players'\n                      multiline\n                      fullWidth\n                      variant='outlined'\n                      value={members.join('\\n')}\n                      onChange={\n                        (event: ChangeEvent<HTMLTextAreaElement>) => {\n                          const newMembers: string[] = event.currentTarget.value.split('\\n')\n                          teamState.members.set(_ => newMembers)\n                        }\n                      }\n                    />\n                  </Grid>\n                  <Grid item>\n                    <ChromePicker\n                      color={color}\n                      onChange={\n                        ({hex}: ColorResult) => teamState.set(team => ({...team, color: hex}))\n                      } />\n                  </Grid>\n                  <Grid item>\n                    <Button\n                      variant='outlined'\n                      onClick={\n                        () => teamsState.set(teams => teams.filter((_, j) => j !== i))\n                      }>\n                      Delete\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            }\n          )\n        }\n        <Grid item>\n          <Button\n            variant='outlined'\n            onClick={\n              () => teamsState.set(teams => [...teams, {name: 'New Team', members: [], color: '#fff'}])\n            }>\n            Add\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item>\n      <Typography variant='h2'>Players</Typography>\n    </Grid>\n    <Grid item>\n      <Grid container direction='column' spacing={1}>\n        <Grid item>\n          <TextField\n            label='Players'\n            multiline\n            fullWidth\n            variant='outlined'\n            value={teamsState.get().flatMap(({members}) => members).join('\\n')}\n            onChange={\n              (event: ChangeEvent<HTMLTextAreaElement>) => {\n                const newMembers: string[] = event.currentTarget.value.split('\\n')\n                const newTeams: string[][] = chunk(newMembers, Math.ceil(newMembers.length / teamsState.length))\n\n                teamsState.forEach(\n                  (teamState, i) => {\n                    teamState.members.set(newTeams[i] ?? [])\n                  }\n                )\n              }\n            }\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant='outlined'\n            onClick={\n              () => {\n                const teamMembers: string[] = teamsState.get()\n                  .flatMap(t => t.members)\n                const newTeams: string[][] = chunk(shuffle(teamMembers), Math.ceil(teamMembers.length / teamsState.get().length))\n                teamsState.forEach(\n                  (teamState, i) => {\n                    teamState.members.set(newTeams[i] ?? [])\n                  }\n                )\n              }\n            }>\n            Shuffle\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item>\n      <Grid container direction='column' spacing={1}>\n        <Grid item>\n          <Typography variant='h2'>Challenges</Typography>\n        </Grid>\n        <Grid item>\n          <TextField\n            label='Challenges'\n            multiline\n            fullWidth\n            variant='outlined'\n            value={gameDataState.challenges.get().map(({challenge}) => challenge).join('\\n')}\n            onChange={\n              (event: ChangeEvent<HTMLTextAreaElement>) => gameDataState.challenges.set(() => event.currentTarget.value.split('\\n').map(challenge => ({challenge})))\n            }\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  </Grid>\n}\n","import React from 'react'\nimport {Team} from '../../state'\nimport {Grid, List, ListItem, ListItemIcon, ListItemText, ListSubheader, Typography} from '@material-ui/core'\nimport RadioButtonUncheckedOutlinedIcon from '@material-ui/icons/RadioButtonUncheckedOutlined'\n\nexport interface HomeProps {\n  readonly teams: Team[]\n}\n\nexport default function Home({teams}: HomeProps) {\n  return <Grid container direction='column' alignContent='center' spacing={4}>\n    <Grid item>\n      <Typography variant='h2'>Teams</Typography>\n    </Grid>\n    <Grid item>\n      <Grid container spacing={4} justify='center'>\n        {\n          teams.map(\n            ({name, members, color}, i) => <Grid item key={`team-${i}`}>\n              <List subheader={\n                <ListSubheader>\n                  {name}\n                </ListSubheader>\n              }>\n                {\n                  members.map(\n                    (memberName, j) => <ListItem key={`team-${i}-member-${j}`} button>\n                      <ListItemIcon>\n                        <RadioButtonUncheckedOutlinedIcon htmlColor={color} />\n                      </ListItemIcon>\n                      <ListItemText primary={memberName} />\n                    </ListItem>\n                  )\n                }\n              </List>\n            </Grid>\n          )\n        }\n      </Grid>\n    </Grid>\n  </Grid>\n}\n","import React, {ChangeEvent} from 'react'\n\nimport {Checkbox, FormControlLabel, Grid, TextField, Typography} from '@material-ui/core'\nimport {State, useState} from '@hookstate/core'\nimport {AppState} from '../../state'\n\nexport interface SettingsProps {\n  readonly appStateRef: State<AppState>\n}\n\nexport default function Settings({appStateRef}: SettingsProps) {\n  const settingsState = useState(appStateRef.settings)\n\n  const challengeDurationSec = settingsState.challengeDurationMs.get() / 1000\n\n  return <Grid container direction='column' alignContent='center' spacing={4}>\n    <Grid item>\n      <Typography variant='h1'>\n        Settings\n      </Typography>\n    </Grid>\n    <Grid item>\n      <TextField\n        label='Seconds'\n        variant='outlined'\n        value={challengeDurationSec || ''}\n        onChange={\n          (event: ChangeEvent<HTMLTextAreaElement>) => settingsState.challengeDurationMs.set(parseFloat(event.currentTarget.value) * 1000)\n        } />\n    </Grid>\n    <Grid item>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={settingsState.snowing.get()}\n            onChange={(event: ChangeEvent<HTMLInputElement>) => settingsState.snowing.set(() => event.currentTarget.checked)} />\n        }\n        label='Snowing ❄️'\n      />\n\n    </Grid>\n  </Grid>\n}\n","import {State, useState} from '@hookstate/core'\nimport '@hookstate/devtools'\nimport {createMuiTheme, CssBaseline, ThemeProvider} from '@material-ui/core'\nimport React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Snowfall from 'react-snowfall'\nimport {AppState, Challenge, localStoragePersistence} from '../state'\nimport HeaderBar from './HeaderBar'\nimport Game from './Game'\nimport Edit from './Edit'\nimport Home from './Home'\nimport Settings from './Settings'\n\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n})\n\nconst defaultChallenges: (string | Challenge)[] = [\n  'What is the pythagorean theorem?',\n  'Name 4 past US presidents',\n  'Pretend you’re reviewing a BBC tutorial on how to make egg fried rice',\n  'Name the number right before 1 trillion',\n  'Name 3 primary colors',\n  'Use the made-up word “beninging” in a sentence',\n  'Name 3 things you find in an airport',\n  'You’re writing a song about numbers. What are the lyrics?',\n  'Name 4 colleges @ UCSD',\n  'Name a famous, rotund rabbit',\n  'Name 4 elements on the periodic table',\n  'Say three words that rhyme',\n  'What’s the hottest star in our solar system?',\n  'Name 3 pokemon',\n  'What is (19 + 19) × 2?',\n  'Create a new dance move',\n  'Name 4 different chess pieces',\n  {\n    challenge: 'Spell your full first name backwards',\n    rules: {\n      showName: false\n    }\n  },\n  'Name 4 things that are orange',\n  'Name 3 Chinese dishes',\n  'Invent a new word and define it',\n  'Name 3 types of doctors',\n  'Name 3 red fruits',\n  'Name 3 objects you find in a kitchen',\n  'Pretend you’re on a roller coaster are mortally afraid of heights',\n  'Name 3 foods that end with “y”',\n  'Describe a chicken without using words',\n  'Name 3 muscles in the human body',\n  'Pretend you’re a talking tree being cut down'\n]\n\nexport default function App() {\n  const appState: State<AppState> = useState<AppState>({\n    settings: {\n      challengeDurationMs: 7000,\n      teams: [\n        {\n          name: '🎄 Team Christmas Tree',\n          members: ['Jeremiah Lin', 'Eric Jiang', 'Brian Lin', 'Nathan Ng'],\n          color: '#00695f'\n        },\n        {\n          name: '☃️ Team Snowman',\n          members: ['Andrew Chan', 'Woen Lee', 'Moyang Wang', 'Kirk S', 'Paulos Liu'],\n          color: '#fafafa'\n        },\n        {\n          name: '🌶 Team Candy Cane',\n          members: ['Young Hsu', 'Andrew Jabasa', 'Steven Lee'],\n          color: '#ab003c'\n        }\n      ],\n      snowing: true\n    },\n    gameData: {\n      challenges: defaultChallenges.map((value: string | Challenge): Challenge => typeof value === 'string' ? {challenge: value} : value)\n    }\n  })\n    .attach(localStoragePersistence)\n\n  return <ThemeProvider theme={theme}>\n    {\n      appState.settings.snowing.get() ? <Snowfall /> : undefined\n    }\n    <CssBaseline>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <HeaderBar title={`${appState.settings.challengeDurationMs.get() / 1000} Second Challenge`} />\n        <Switch>\n          <Route exact path='/'>\n            <Home teams={appState.settings.teams.get()} />\n          </Route>\n          <Route path='/edit'>\n            <Edit appStateRef={appState} />\n          </Route>\n          <Route path='/settings'>\n            <Settings appStateRef={appState} />\n          </Route>\n          <Route path='/play'>\n            <Game appState={appState.get()} />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </CssBaseline>\n  </ThemeProvider>\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}